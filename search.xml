<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[git-cheat-sheet]]></title>
    <url>%2F2019%2F05%2F31%2Fgit-cheat-sheet%2F</url>
    <content type="text"><![CDATA[INSTALLMac OS X 1$ brew install git Linux 1234Debian Linux:$ sudo apt-get install gitRedhat Linux:$ yum install git Windows ​ Download CONFIG12$ git config --global user.name "Your Name"$ git config --global user.email "email@example.com" CREATEClone an existing repository 1$ git clone ssh://user@domain.com/repo.git Create a new local repository 1$ git init LOCAL CHANGESChanged files in your working directory 1$ git status Changes to tracked files 1$ git diff Add all current changes to the next commit 1$ git add . Add some changes in to the next commit 1$ git add -p &lt;file&gt; Commit all local changes in tracked files 1$ git commit -a Commit previously staged changes 1$ git commit Change the last commitDon‘t amend published commits! 1$ git commit --amend COMMIT HISTORYShow all commits, starting with newest 1$ git log Show changes over time for a specific file 1$ git log -p &lt;file&gt; Who changed what and when in 1$ git blam &lt;file&gt; BRANCHES &amp; TAGSList all existing branches 1$ git branch -av Switch HEAD branch 1$ git checkout &lt;branch&gt; Create a new branch based on your current HEAD 1$ git branch &lt;new-branch&gt; Create a new tracking branch based on a remote branch 1$ git checkout --track &lt;remote/branch&gt; Delete a local branch 1$ git branch -d &lt;branch&gt; Mark the current commit with a tag 1$ git tag &lt;tag-name&gt; UPDATE &amp; PUBLISHList all currently configured remotes 1$ git remote -v Show information about a remote 1$ git remote show &lt;remote&gt; Add new remote repository, named 1$ git remote add &lt;shortname&gt; &lt;url&gt; Download all changes from , but don‘t integrate into HEAD 1$ git fetch &lt;remote&gt; Download changes and directly merge/integrate into HEAD 1$ git pull &lt;remote&gt; &lt;branch&gt; Publish local changes on a remote 1$ git push &lt;remote&gt; &lt;branch&gt; Delete a branch on the remote 1$ git branch -dr &lt;remote/branch&gt; Publish your tags 1$ git push --tags MERGE &amp; REBASEMerge into your current HEAD 1$ git merge &lt;branch&gt; Rebase your current HEAD onto Don‘t rebase published commits! 1$ git rebase &lt;branch&gt; Abort a rebase 1$ git rebase --abort Continue a rebase after resolving conflicts 1$ git rebase --continue Use your configured merge tool to solve conflicts 1$ git mergetool Use your editor to manually solve conflicts and (after resolving) mark file as resolved 12$ git add &lt;resolved-file&gt;$ git rm &lt;resolved-file&gt; UNDODiscard all local changes in your working directory 1$ git reset --hard HEAD Discard local changes in a specific file 1$ git checkout HEAD &lt;file&gt; Revert a commit (by producing a new commit with contrary changes) 1$ git revert &lt;commit&gt; Reset your HEAD pointer to a previous commit …and discard all changes since then 1$ git reset --hard &lt;commit&gt; …and preserve all changes as unstaged changes 1$ git reset &lt;commit&gt; …and preserve uncommitted local changes 1$ git reset --keep &lt;commit&gt;]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker]]></title>
    <url>%2F2019%2F05%2F26%2Fdocker%2F</url>
    <content type="text"><![CDATA[installkernel version &gt; 3.10 1$ uname -r update 1$ sudo yum update remove old docker version 1$ sudo yum remove docker docker-common docker-selinux docker-engine install depends 1$ sudo yum install -y yum-utils device-mapper-persistent-data lvm2 set yum repo 1$ sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo check repository all docker version 1$ yum list docker-ce --showduplicates | sort -r install docker 1234$ sudo yum makecache fast$ sudo yum install docker-ce or$ sudo yum install &lt;FQPN&gt; check version 1$ docker version]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Github+Hexo+Next博客搭建总结]]></title>
    <url>%2F2019%2F05%2F25%2FGithub-Hexo-Next%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[准备工作安装Hexo之前确保已经安装好了Node.js和git,验证方式如下:12$ node -v$ git --version 在github建立一个仓库名为xxx.github.io的库,xxx为github username 安装Hexo1$ npm install hexo-cli -g 安装hexo1$ hexo init blog 初始化博客blog,初始化完成后在blog目录下有个_config.yml, 这个是站点配置文件1$ hexo new "test" 新建文章test1$ hexo g 生成网页1$ hexo s 启动服务预览,浏览器url输入localhost:4000 就可以看到1$ hexo d 部署网页,部署之前要在站点配置文件配置Deployment1234deploy: type: git repository: https://github.com/xxx/xxx.github.io.git branch: master 其中xxx为github username Next主题下载next主题到themes目录下,themes下有个landscape,这个是默认主题1$ git clone https://github.com/theme-next/hexo-theme-next.git themes/next 在themes/next下也有一个_config.yml,这个是主题配置文件,注意区别于站点配置文件,两个配置文件同名但不同位置,修改站点配置文件中theme的地方,改成next1theme: next 在主题配置文件下修改next主题的样式设置scheme,去掉前边的#注释,改成自己喜欢的样式12345scheme:#scheme: Muse#scheme: Mist#scheme: Pisces#scheme: Gemini 评论功能采用第三方 来比力City版,注册账号在代码托管中获取data-uid,写入主题配置文件livere_uid这样每个页面都有评论功能了, 如果不想让某一页面有评论功能, 加如下内容到对应md文件1comments: false 搜索功能采用第三方 Algolia, 注册获取applicationID,apiKey,indexName写入站点配置文件,启用主题配置algolia_search12$ npm install hexo-algolia --save$ hexo algolia 如果在执行 hexo algolia 报错, 判断环境变量 HEXO_ALGOLIA_INDEXING_KEY 为apiKey,ACL授权是否正确 IM聊天功能采用第三方 DaoVoice, 注册账号后获取app_id,主题配置文件启用daovoice并写入daovoice_app_id 统计功能采用第三方 LeanCloud, 注册后获取appid和appkey,主题配置文件启用leancloud_visitors并写入app_id和app_key 未完待续……]]></content>
      <categories>
        <category>瞎折腾</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F05%2F25%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>瞎折腾</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
